/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        /** 经典的建树，建树无论是前后建树，或者中后建树，要点都是传递中的序列下标，因为根结点下标都可以根据中进行推算。 我们直接返回build函数 在build中，如果start>end则返回是递归终止条件。我们将root节点new出来 然后while循环负责进行找到中节点中root节点的下标，最后左右递归即可。
        */
        return build(preorder, inorder, 0, 0, inorder.length - 1);
    }
    public TreeNode build(int[] preorder, int[] inorder, int root, int start, int end) {
        // 中序的start和end
        if (start > end) return null;
        TreeNode tree = new TreeNode(preorder[root]);
        int i = start;
        while (i < end && preorder[root] != inorder[i]) i++;
        tree.left = build(preorder, inorder, root + 1, start, i - 1);
        tree.right = build(preorder, inorder, root + 1 + i - start, i + 1, end);
        return tree;
    }
}
